system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 1, metric = "BIC", cutoff = 10))
system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 1, metric = "BIC", cutoff = 10))
res <- summary(BranchVS)
plot(res, type = "b")
plot(res, ptype = "variables")
plot(res, ptype = "variables")
plot(res, ptype = "variables")
?mtext
?mar
?par
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 6, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = paste0("Rank According to ", object$metric),
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = paste0("Rank According to ", object$metric),
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
plot(res, ptype = "variables")
)
plot(res, ptype = "variables")
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 10, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = paste0("Rank According to ", object$metric),
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = paste0("Rank According to ", object$metric),
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
plot(res, ptype = "variables")
plot(res, ptype = "variables")
?axis
?mtext
?ylab
?lab
?title
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 5, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
title(ylab = paste0("Rank According to ", object$metric))
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
plot(res, ptype = "variables")
?title
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 5, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
title(ylab = paste0("Rank According to ", object$metric), outer = TRUE)
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
plot(res, ptype = "variables")
?mtext
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 5, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
# Adding axis labels
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
# Adding y-axis title
mtext(paste0("Rank According to ", object$metric), side = 2)
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
plot(res, ptype = "variables")
?mtext
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 5, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
# Adding axis labels
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
# Adding y-axis title
mtext(paste0("Rank According to ", object$metric), side = 2, line = 1)
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
?mtext
plot(res, ptype = "variables")
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 5, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
# Adding axis labels
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
# Adding y-axis title
mtext(paste0("Rank According to ", object$metric), side = 2, line = 3)
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
plot(res, ptype = "variables")
plot.summary.BranchGLMVS <- function(object, ptype = "metrics", marx = 7, ...){
if(ptype == "metrics"){
plot(1:nrow(object$results), object$results[, object$metric],
xlab = "Rank", ylab = object$metric,
main = paste0(object$metric, " Sorted by Rank"), ...)
}else if(ptype == "variables"){
# This is inspired by the plot.regsubsets function
n <- length(object$formulas)
Names <- colnames(object$results)[-ncol(object$results)]
z <- object$results[, -ncol(object$results)]
z[z == "kept"] <- 2
z[z == "no"] <- 1
z[z == "yes"] <- 0
z <- apply(z, 2, as.numeric)
z <- as.matrix(z) |>
t()
y <- 1:ncol(z)
x <- 1:nrow(z)
# Creating image
oldmar <- par("mar")
par(mar = c(marx, 5, 3, 8) + 0.1)
if(all(z != 2)){
# Do this if there were no variable kept
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded"),
fill = c("deepskyblue", "indianred"), xpd = TRUE)
}else{
# Do this if there were any kept variables
image(x, y, z, ylab = "",
xaxt = "n", yaxt = "n", xlab = "",
main = paste0("Best Models Ranked by ", object$metric),
col = c("deepskyblue", "indianred", "forestgreen"))
legend(grconvertX(1, from = "npc"), grconvertY(1, from = "npc"),
legend = c("Included", "Excluded", "Kept"),
fill = c("deepskyblue", "indianred", "forestgreen"), xpd = TRUE)
}
# Adding lines
abline(v = x + 0.5, h = y + 0.5)
# Adding axis labels
axis(1, at = x, labels = Names, line = 1, las = 2)
axis(2, at = y, labels = y, line = 1, las = 2)
# Adding y-axis title
mtext(paste0("Rank According to ", object$metric), side = 2, line = 4)
# Resetting mar
par(mar = oldmar)
}else{
stop("supplied ptype is not currently supported")
}
}
plot(res, ptype = "variables")
?mtext
## Times
### Timing branch and bound
system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 1, metric = "BIC", cutoff = 2))
res <- summary(BranchVS)
plot(res, type = "b")
plot(res, ptype = "variables")
## Times
### Timing branch and bound
system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 1000, metric = "BIC", cutoff = 0))
res <- summary(BranchVS)
plot(res, type = "b")
plot(res, ptype = "variables")
system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 10000, metric = "BIC", cutoff = 0))
res <- summary(BranchVS)
plot(res, type = "b")
plot(res, ptype = "variables")
## Times
### Timing branch and bound
system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 1, metric = "BIC", cutoff = 10))
res <- summary(BranchVS)
plot(res, type = "b")
plot(res, ptype = "variables")
plot(res, ptype = "variables")
## Times
### Timing branch and bound
system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 25, metric = "BIC", cutoff = 0))
res <- summary(BranchVS)
plot(res, type = "b")
plot(res, ptype = "variables")
## Times
### Timing branch and bound
system.time(BranchVS <- VariableSelection(y ~ ., data = df,
family = "gaussian", link = "identity",
type = "switch branch and bound", showprogress = FALSE,
parallel = FALSE, nthreads = 8, method = "Fisher",
bestmodels = 25, metric = "HQIC", cutoff = 0))
res <- summary(BranchVS)
plot(res, type = "b")
plot(res, ptype = "variables")
